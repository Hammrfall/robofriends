{"version":3,"sources":["serviceWorker.js","Card.js","RobotList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","className","src","this","props","robot","name","alt","email","React","Component","RobotList","robots","map","el","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","State","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCCSC,E,uKAZP,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAK,wBAA0BC,KAAKC,MAAMC,MAAMC,KAAO,WAAYC,IAAI,eAC5E,4BAAKJ,KAAKC,MAAMC,MAAMC,MAC9B,4BAAKH,KAAKC,MAAMC,MAAMG,Y,GAPXC,IAAMC,WCWVC,E,uKATP,OACI,6BACCR,KAAKC,MAAMQ,OAAOC,KAAI,SAACC,EAAIC,GAAK,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,MAAOS,Y,GAJjDL,IAAMC,WCefO,EAjBG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAGxB,OACI,6BACI,2BAAOC,KAAK,SAASC,YAAc,gBAAgBpB,UAAU,mCAC7DqB,SAAUH,MCEXI,G,MARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAQ,UAC/DvB,EAAMwB,YC2CJC,E,kDAxCX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAjBzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACpB,OAAQ4B,S,+BAQtB,IAAD,OACEC,EAAiBtC,KAAKgC,MAAMvB,OAAO8B,QAAO,SAAArC,GAC5C,OAAOA,EAAMC,KAAKqC,cAAcC,SAAS,EAAKT,MAAMjB,YAAYyB,kBAEpE,OACA,6BACI,yBAAK1C,UAAY,MACb,4CACA,kBAAC,EAAD,CAAW4C,MAAO1C,KAAKgC,MAAOhB,aAAchB,KAAK2B,kBAErD,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWlB,OAAU6B,U,GAnCnBhC,IAAMC,WCCxBoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SNsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.13c5da10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n// import ReactDOM from 'react-dom'\n\n\nclass Card extends React.Component{\n\n    render(){\n        return (\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={'https://robohash.org/' + this.props.robot.name + '?200x200'} alt=\"profilepic\"/>\n                <h2>{this.props.robot.name}</h2>\n        <h3>{this.props.robot.email}</h3>\n            </div>\n        )\n    }\n\n}\n\n\nexport default Card","import React from 'react';\n\nimport Card from './Card.js'\n\nclass RobotList extends React.Component{\n    render(){\n        return (\n            <div>\n            {this.props.robots.map((el, i)=>{return <Card key={i} robot={el}/>})}\n            </div>\n        )\n    }\n\n}\n\nexport default RobotList;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange})=>{\n\n\n        return(\n            <div>\n                <input type=\"search\" placeholder = 'search robots' className=\"pa3 ba b--green bg-lightest-blue\"\n                onChange={searchChange}/>\n\n\n\n            </div>\n        )\n    \n\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=>{\n    return ( \n        <div style={{overflowY: 'scroll', border: '1px solid black',height: '500px' }}>\n            {props.children}\n        </div>\n        )\n}\n\nexport default Scroll;","import React from 'react';\nimport RobotList from './RobotList';\nimport SearchBox from './SearchBox';\nimport './App.css'\nimport Scroll from './Scroll';\n\nclass App extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>{\n            return response.json();\n        })\n        .then(users=>{\n            this.setState({robots: users})\n        })\n    }\n\n    onSearchChange = (event)=>{\n        this.setState({searchfield: event.target.value})\n    }\n\n    render(){\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        return(\n        <div>\n            <div className = \"tc\">\n                <h1>Robo Friends</h1>\n                <SearchBox State={this.state} searchChange={this.onSearchChange} />\n            </div>\n            <Scroll>\n                <RobotList robots = {filteredRobots} />\n            </Scroll>\n        </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}